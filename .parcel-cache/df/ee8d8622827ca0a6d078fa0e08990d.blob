"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

var _View = _interopRequireDefault(require("./View"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PaginationView extends _View.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentElement", document.querySelector('.pagination'));
  }

  _generateMarkup() {
    const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);
    console.log(numPages);
    const curPage = this._data.page;

    function prevButton(n) {
      return `<button class="btn--inline pagination__btn--prev">
        <svg class="search__icon">
          <use href="${_icons.default}#icon-arrow-left"></use>
        </svg>
        <span>Page ${curPage - n}, Last page</span>
      </button>`;
    }

    ;

    function nextButton(n) {
      return `<button class="btn--inline pagination__btn--next">
      <span>Page ${curPage + n}</span>
      <svg class="search__icon">
        <use href="${_icons.default}#icon-arrow-right"></use>
      </svg>
    </button> `;
    } // page 1 , and there are other pages


    if (curPage === 1 && numPages > 1) {
      return nextButton(1); //   return `<button class="btn--inline pagination__btn--next">
      //   <span>Page ${curPage + 1}</span>
      //   <svg class="search__icon">
      //     <use href="${icons}#icon-arrow-right"></use>
      //   </svg>
      // </button> `

      console.log(nextButton(1), prevButton(1));
    } // last page


    if (curPage === numPages && numPages > 1) {
      return prevButton(1); // return `<button class="btn--inline pagination__btn--prev">
      //   <svg class="search__icon">
      //     <use href="${icons}#icon-arrow-left"></use>
      //   </svg>
      //   <span>Page ${curPage - 1}, Last page</span>
      // </button>`
      //هون بدي اعدل
    } // other page


    if (curPage < numPages) {
      return `
      <button class="btn--inline pagination__btn--next">
      <span>Page ${curPage + 1}</span>
      <svg class="search__icon">
        <use href="${_icons.default}#icon-arrow-right"></use>
      </svg>
    </button> 
    <button class="btn--inline pagination__btn--prev">
    <svg class="search__icon">
      <use href="${_icons.default}#icon-arrow-left"></use>
    </svg>
    <span>Page ${curPage - 1}</span>
  </button>

      `;
    } // page 1 , and there are no other pages


    return ``; //   return `<button class="btn--inline pagination__btn--prev">
    //   <svg class="search__icon">
    //     <use href="${icons}#icon-arrow-left"></use>
    //   </svg>
    //   <span>All Results</span>
    // </button>`
  }

}

var _default = new PaginationView();

exports.default = _default;